{\rtf \li720 \fi-720 \sl480 \slmult1 \sa0 Addy, E., Mili, A., & Yacoub, S. (1999). A Case Study in Software Reuse. {\i{}Software Quality Journal}, {\i{}8}(3), 169\uc0\u8211{}195. https://doi.org/10.1023/A:1008963424886\
Antoniol, G., Villano, U., Merlo, E., & Di Penta, M. (2002). Analyzing cloning evolution in the Linux kernel. {\i{}Information and Software Technology}, {\i{}44}(13), 755\uc0\u8211{}765. https://doi.org/10.1016/S0950-5849(02)00123-4\
Baker, B. S. (1995). On finding duplication and near-duplication in large software systems. In {\i{}, Proceedings of 2nd Working Conference on Reverse Engineering, 1995} (pp. 86\uc0\u8211{}95). https://doi.org/10.1109/WCRE.1995.514697\
Barnard, J. (1998). A new reusability metric for object-oriented software. {\i{}Software Quality Journal}, {\i{}7}(1), 35\uc0\u8211{}50. https://doi.org/10.1023/B:SQJO.0000042058.34876.c8\
Basit, H. A., & Jarzabek, S. (2009). A Data Mining Approach for Detecting Higher-Level Clones in Software. {\i{}IEEE Transactions on Software Engineering}, {\i{}35}(4), 497\uc0\u8211{}514. https://doi.org/10.1109/TSE.2009.16\
Berndt, D. J., & Watkins, A. (2004). Investigating the performance of genetic algorithm-based software test case generation. In {\i{}Eighth IEEE International Symposium on High Assurance Systems Engineering, 2004. Proceedings} (pp. 261\uc0\u8211{}262). https://doi.org/10.1109/HASE.2004.1281750\
Bildhauer, D., Horn, T., & Ebert, J. (2009). Similarity-driven Software Reuse. In {\i{}Proceedings of the 2009 ICSE Workshop on Comparison and Versioning of Software Models} (pp. 31\uc0\u8211{}36). Washington, DC, USA: IEEE Computer Society. https://doi.org/10.1109/CVSM.2009.5071719\
Burrows, S., Uitdenbogerd, A. L., & Turpin, A. (2014). Comparing techniques for authorship attribution of source code. {\i{}Software: Practice and Experience}, {\i{}44}(1), 1\uc0\u8211{}32. https://doi.org/10.1002/spe.2146\
Cebrian, M., Alfonseca, M., & Ortega, A. (2009). Towards the Validation of Plagiarism Detection Tools by Means of Grammar Evolution. {\i{}IEEE Transactions on Evolutionary Computation}, {\i{}13}(3), 477\uc0\u8211{}485. https://doi.org/10.1109/TEVC.2008.2008797\
Chan, P. P. F., Hui, L. C. K., & Yiu, S. M. (2013). Heap Graph Based Software Theft Detection. {\i{}IEEE Transactions on Information Forensics and Security}, {\i{}8}(1), 101\uc0\u8211{}110. https://doi.org/10.1109/TIFS.2012.2223685\
Chong, M. Y. M. (2013). A study on plagiarism detection and plagiarism direction identification using natural language processing techniques. Retrieved from http://wlv.openrepository.com/wlv/handle/2436/298219\
Cosma, G., & Joy, M. (2012). An Approach to Source-Code Plagiarism Detection and Investigation Using Latent Semantic Analysis. {\i{}IEEE Transactions on Computers}, {\i{}61}(3), 379\uc0\u8211{}394. https://doi.org/10.1109/TC.2011.223\
Ducasse, S., Rieger, M., & Demeyer, S. (1999). A language independent approach for detecting duplicated code. In {\i{}IEEE International Conference on Software Maintenance, 1999. (ICSM \uc0\u8217{}99) Proceedings} (pp. 109\uc0\u8211{}118). https://doi.org/10.1109/ICSM.1999.792593\
Evans, W. S., Fraser, C. W., & Ma, F. (2009). Clone detection via structural abstraction. {\i{}Software Quality Journal}, {\i{}17}(4), 309\uc0\u8211{}330. https://doi.org/10.1007/s11219-009-9074-y\
Hage, J., Rademaker, P., & van Vugt, N. (2011). Plagiarism Detection for Java: A Tool Comparison. In {\i{}Computer Science Education Research Conference} (pp. 33\uc0\u8211{}46). Open Univ., Heerlen, The Netherlands, The Netherlands: Open Universiteit, Heerlen. Retrieved from http://dl.acm.org/citation.cfm?id=2043594.2043597\
Jhi, Y.-C., Jia, X., Wang, X., Zhu, S., Liu, P., & Wu, D. (2015). Program Characterization Using Runtime Values and Its Application to Software Plagiarism Detection. {\i{}IEEE Transactions on Software Engineering}, {\i{}41}(9), 925\uc0\u8211{}943. https://doi.org/10.1109/TSE.2015.2418777\
Nickerson, J., Corter, J., Tversky, B., Zahner, D., & Rho, Y. (2008). The Spatial Nature of Thought: Understanding Systems Design Through Diagrams. {\i{}ICIS 2008 Proceedings}. Retrieved from http://aisel.aisnet.org/icis2008/216\
Roy, C. K., Cordy, J. R., & Koschke, R. (2009). Comparison and evaluation of code clone detection techniques and tools: A qualitative approach. {\i{}Science of Computer Programming}, {\i{}74}(7), 470\uc0\u8211{}495. https://doi.org/10.1016/j.scico.2009.02.007\
Schleimer, S., Wilkerson, D. S., & Aiken, A. (2003). Winnowing: Local Algorithms for Document Fingerprinting. In {\i{}Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data} (pp. 76\uc0\u8211{}85). New York, NY, USA: ACM. https://doi.org/10.1145/872757.872770\
Tian, Z., Zheng, Q., Liu, T., Fan, M., Zhuang, E., & Yang, Z. (2015). Software Plagiarism Detection with Birthmarks Based on Dynamic Key Instruction Sequences. {\i{}IEEE Transactions on Software Engineering}, {\i{}41}(12), 1217\uc0\u8211{}1235. https://doi.org/10.1109/TSE.2015.2454508\
Tiarks, R., Koschke, R., & Falke, R. (2010). An extended assessment of type-3 clones as detected by state-of-the-art tools. {\i{}Software Quality Journal}, {\i{}19}(2), 295\uc0\u8211{}331. https://doi.org/10.1007/s11219-010-9115-6\
Yamamoto, T., Matsushita, M., Kamiya, T., & Inoue, K. (2005). Measuring Similarity of Large Software Systems Based on Source Code Correspondence. In F. Bomarius & S. Komi-Sirvi\uc0\u246{} (Eds.), {\i{}Product Focused Software Process Improvement} (pp. 530\uc0\u8211{}544). Springer Berlin Heidelberg. https://doi.org/10.1007/11497455_41\
Zhu, X., Whitehead, E. J., Sadowski, C., & Song, Q. (2015). An analysis of programming language statement frequency in C, C++, and Java source code. {\i{}Software: Practice and Experience}, {\i{}45}(11), 1479\uc0\u8211{}1495. https://doi.org/10.1002/spe.2298\
}