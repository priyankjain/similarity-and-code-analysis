{
  "name": "array-tools",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "1.8.6",
  "description": "Lightweight tool-kit for working with arrays",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/array-tools.git"
  },
  "main": "./lib/array-tools.js",
  "bin": {
    "array-tools": "bin/cli.js"
  },
  "license": "MIT",
  "keywords": [
    "pluck",
    "pick",
    "extract",
    "flatten",
    "sort by",
    "arrayify",
    "exists",
    "where",
    "find where",
    "without",
    "union",
    "common sequence",
    "unique",
    "splice while"
  ],
  "scripts": {
    "test": "tape test/*.js",
    "lint": "jshint lib/*.js test/*.js; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js  > README.md; echo",
    "cover": "istanbul cover ./node_modules/.bin/tape test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "jsdoc-to-markdown": "^1.0.3",
    "tape": "^4"
  },
  "dependencies": {
    "object-tools": "^1.6.1",
    "typical": "^2.1"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![npm module downloads per month](http://img.shields.io/npm/dm/array-tools.svg)](https://www.npmjs.org/package/array-tools)\n[![Build Status](https://travis-ci.org/75lb/array-tools.svg?branch=master)](https://travis-ci.org/75lb/array-tools)\n[![Dependency Status](https://david-dm.org/75lb/array-tools.svg)](https://david-dm.org/75lb/array-tools)\n[![Coverage Status](https://coveralls.io/repos/75lb/array-tools/badge.svg?branch=master)](https://coveralls.io/r/75lb/array-tools?branch=master)\n\n# array-tools\nLightweight tool-kit for working with array data. 1.5k, compressed.\n\n```js\n> var a = require(\"array-tools\");\n```\n\nThere are four ways to use it.\n\n1) As a standard library, passing the input array on each method invocation:\n\n```js\n> var remainder = a.without([ 1, 2, 3, 4, 5 ], 1)\n> a.exists(remainder, 1)\nfalse\n```\n\n2) As a chainable method, passing the input array once then chaining from there:\n\n```js\n> a([ 1, 2, 3, 4, 5 ]).without(1).exists(1);\nfalse\n```\n\n3) As a base class.\n```js\nvar util = require(\"util\");\nvar ArrayTools = require(\"array-tools\");\n\nfunction CarCollection(cars){\n  ArrayTools.call(this, cars);\n}\nutil.inherits(CarCollection, ArrayTools);\n\nvar cars = new CarCollection([ \n  { owner: \"Me\", model: \"Citreon Xsara\" }, \n  { owner: \"Floyd\", model: \"Bugatti Veyron\" } \n]);\n\ncars.findWhere({ owner: \"Floyd\" });\n// returns { owner: \"Floyd\", model: \"Bugatti Veyron\" }\n```\n\n4) As a command-line tool. \n```sh\n$ curl -s \"https://api.github.com/users/75lb/repos?page=1&per_page=100\" | array-tools pick full_name description\n[\n  {\n    \"full_name\": \"75lb/ansi-escape-sequences\",\n    \"description\": \"A simple library containing all known terminal ansi escape codes and sequences.\"\n  },\n  {\n    \"full_name\": \"75lb/baldrick\",\n    \"description\": \"Your own private dogsbody. Does the shitty work you can't be arsed to do.\"\n  },\n  etc,\n  etc\n]\n```\n\n#### More on chaining\nEach method returning an `Array` (e.g. `where`, `without`) can be chained. Methods not returning an array (`exists`, `contains`) cannot be chained. If the final operation in your chain is chainable (returns an array), append `.val()` to terminate the chain and retrieve the output.\n\n```js\n> a([ 1, 2, 2, 3 ]).exists(1)\ntrue\n> a([ 1, 2, 2, 3 ]).without(1).exists(1)\nfalse\n> a([ 1, 2, 2, 3 ]).without(1).unique().val()\n[ 2, 3 ]\n```\n\n## Compatibility\nThis library is tested in node versions 0.10, 0.11, 0.12, iojs and the following browsers:\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/arr-tools.svg)](https://saucelabs.com/u/arr-tools)\n\n## Install\nAs a library:\n\n```\n$ npm install array-tools --save\n```\n\nAs a command-line tool:\n```\n$ npm install -g array-tools\n```\n\n## API Reference\n\n* [array-tools](#module_array-tools)\n  * _chainable_\n    * [.arrayify(any)](#module_array-tools.arrayify) ⇒ <code>Array</code>\n    * [.where(arrayOfObjects, query)](#module_array-tools.where) ⇒ <code>Array</code>\n    * [.pluck(arrayOfObjects, ...property)](#module_array-tools.pluck) ⇒ <code>Array</code>\n    * [.pick(arrayOfObjects, ...property)](#module_array-tools.pick) ⇒ <code>Array.&lt;object&gt;</code>\n    * [.without(array, toRemove)](#module_array-tools.without) ⇒ <code>Array</code>\n    * [.union(array1, array2, idKey)](#module_array-tools.union) ⇒ <code>Array</code>\n    * [.commonSequence(a, b)](#module_array-tools.commonSequence) ⇒ <code>Array</code>\n    * [.unique(array)](#module_array-tools.unique) ⇒ <code>Array</code>\n    * [.spliceWhile(array, index, test, ...elementN)](#module_array-tools.spliceWhile) ⇒ <code>Array</code>\n    * [.extract(array, query)](#module_array-tools.extract) ⇒ <code>Array</code>\n    * [.flatten(array)](#module_array-tools.flatten) ⇒ <code>Array</code>\n    * [.sortBy(arrayOfObjects, columns, customOrder)](#module_array-tools.sortBy) ⇒ <code>Array</code>\n  * _not chainable_\n    * [.exists(array, value)](#module_array-tools.exists) ⇒ <code>boolean</code>\n    * [.findWhere(arrayOfObjects, query)](#module_array-tools.findWhere) ⇒ <code>object</code>\n    * [.last(arr)](#module_array-tools.last) ⇒ <code>\\*</code>\n    * [.remove(arr, toRemove)](#module_array-tools.remove) ⇒ <code>\\*</code>\n    * [.contains(arr, value)](#module_array-tools.contains) ⇒\n\n<a name=\"module_array-tools.arrayify\"></a>\n### a.arrayify(any) ⇒ <code>Array</code>\nTakes any input and guarantees an array back.\n\n- converts array-like objects (e.g. `arguments`) to a real array\n- converts `null` or `undefined` to an empty array\n- converts any another other, singular value into an array containing that value\n- ignores input which is already an array\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| any | <code>\\*</code> | the input value to convert to an array |\n\n**Example**  \n```js\n> a.arrayify(null)\n[]\n\n> a.arrayify(0)\n[ 0 ]\n\n> a.arrayify([ 1, 2 ])\n[ 1, 2 ]\n\n> function f(){ return a.arrayify(arguments); }\n> f(1,2,3)\n[ 1, 2, 3 ]\n```\n<a name=\"module_array-tools.where\"></a>\n### a.where(arrayOfObjects, query) ⇒ <code>Array</code>\nQuery a recordset, at any depth..\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arrayOfObjects | <code>Array.&lt;object&gt;</code> | the recordset to query |\n| query | <code>query</code> | the query definition |\n\n**Example**  \n```js\n> data = [\n    { name: \"Dana\", age: 30 },\n    { name: \"Yana\", age: 20 },\n    { name: \"Zhana\", age: 10 }\n]\n\n> // match on an exact value\n> a.where(data, { age: 10 })\n[ { name: 'Zhana', age: 10 } ]\n\n> // match records which satisfy the function testing the value of the `age` field\n> a.where(data, { age: function(ageValue){ return ageValue > 10; }  })\n[ { name: 'Dana', age: 30 }, { name: 'Yana', age: 20 } ]\n\n> // match if NOT the value\n> a.where(data, { \"!age\": 10 })\n[ { name: 'Dana', age: 30 }, { name: 'Yana', age: 20 } ]\n\n> // match on regular expression\n> a.where(data, { name: /ana/ })\n[ { name: 'Dana', age: 30 },\n  { name: 'Yana', age: 20 },\n  { name: 'Zhana', age: 10 } ]\n\n> // you can perform deep queries \n> deepData = [\n    { name: \"Dana\", favourite: { colour: \"light red\" } },\n    { name: \"Yana\", favourite: { colour: \"dark red\" } },\n    { name: \"Zhana\", favourite: { colour: [ \"white\", \"red\" ] } }\n]\n\n> // match values of `person.favourite.colour` which match the regex `/red/`\n> a.where(deepData, { favourite: { colour: /red/ } })\n[ { name: 'Dana', favourite: { colour: 'light red' } },\n  { name: 'Yana', favourite: { colour: 'dark red' } } ]\n\n> // if there are one or more values for colour (i.e. the field may contain a singular\n> // or array of values) then search inside arrays too \n> a.where(deepData, { favourite: { \"+colour\": /red/ } })\n[ { name: 'Dana', favourite: { colour: 'light red' } },\n  { name: 'Yana', favourite: { colour: 'dark red' } },\n  { name: 'Zhana', favourite: { colour: [ \"white\", \"red\" ] } } ]\n```\n<a name=\"module_array-tools.pluck\"></a>\n### a.pluck(arrayOfObjects, ...property) ⇒ <code>Array</code>\nPlucks the value of the specified property from each object in the input array\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arrayOfObjects | <code>Array.&lt;object&gt;</code> | The input recordset |\n| ...property | <code>string</code> | Up to three property names - the first one found will be returned. |\n\n**Example**  \n```js\n> var data = [\n    { a: \"Lionel\", b: \"Roger\" },\n    { a: \"Luis\", b: \"Craig\" },\n    { b: \"Peter\" },\n]\n\n> a.pluck(data, \"a\")\n[ 'Lionel', 'Luis' ]\n\n> a.pluck(data, \"a\", \"b\")\n[ 'Lionel', 'Luis', 'Peter' ]\n```\n<a name=\"module_array-tools.pick\"></a>\n### a.pick(arrayOfObjects, ...property) ⇒ <code>Array.&lt;object&gt;</code>\nreturn a copy of the input `arrayOfObjects` containing objects having only the cherry-picked properties\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arrayOfObjects | <code>Array.&lt;object&gt;</code> | the input |\n| ...property | <code>string</code> | the properties to include in the result |\n\n**Example**  \n```js\n> data = [\n    { name: \"Dana\", age: 30 },\n    { name: \"Yana\", age: 20 },\n    { name: \"Zhana\", age: 10 }\n]\n\n> a.pick(data, \"name\")\n[ { name: 'Dana' }, { name: 'Yana' }, { name: 'Zhana' } ]\n\n> a.pick(data, \"name\", \"age\")\n[ { name: 'Dana', age: 30 },\n  { name: 'Yana', age: 20 },\n  { name: 'Zhana', age: 10 } ]\n```\n<a name=\"module_array-tools.without\"></a>\n### a.without(array, toRemove) ⇒ <code>Array</code>\nReturns the input minus the specified values.\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | the input array |\n| toRemove | <code>\\*</code> | a single, or array of values to omit |\n\n**Example**  \n```js\n> a.without([ 1, 2, 3 ], 2)\n[ 1, 3 ]\n\n> a.without([ 1, 2, 3 ], [ 2, 3 ])\n[ 1 ]\n```\n<a name=\"module_array-tools.union\"></a>\n### a.union(array1, array2, idKey) ⇒ <code>Array</code>\nmerge two arrays into a single array of unique values\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array1 | <code>Array</code> | First array |\n| array2 | <code>Array</code> | Second array |\n| idKey | <code>string</code> | the unique ID property name |\n\n**Example**  \n```js\n> var array1 = [ 1, 2 ], array2 = [ 2, 3 ];\n> a.union(array1, array2)\n[ 1, 2, 3 ]\n\n> var array1 = [ { id: 1 }, { id: 2 } ], array2 = [ { id: 2 }, { id: 3 } ];\n> a.union(array1, array2)\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n\n> var array2 = [ { id: 2, blah: true }, { id: 3 } ]\n> a.union(array1, array2)\n[ { id: 1 },\n  { id: 2 },\n  { id: 2, blah: true },\n  { id: 3 } ]\n> a.union(array1, array2, \"id\")\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n```\n<a name=\"module_array-tools.commonSequence\"></a>\n### a.commonSequence(a, b) ⇒ <code>Array</code>\nReturns the initial elements which both input arrays have in common\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| a | <code>Array</code> | first array to compare |\n| b | <code>Array</code> | second array to compare |\n\n**Example**  \n```js\n> a.commonSequence([1,2,3], [1,2,4])\n[ 1, 2 ]\n```\n<a name=\"module_array-tools.unique\"></a>\n### a.unique(array) ⇒ <code>Array</code>\nreturns an array of unique values\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | input array |\n\n**Example**  \n```js\n> n = [1,6,6,7,1]\n[ 1, 6, 6, 7, 1 ]\n\n> a.unique(n)\n[ 1, 6, 7 ]\n```\n<a name=\"module_array-tools.spliceWhile\"></a>\n### a.spliceWhile(array, index, test, ...elementN) ⇒ <code>Array</code>\nsplice from `index` until `test` fails\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | the input array |\n| index | <code>number</code> | the position to begin splicing from |\n| test | <code>RegExp</code> | the test to continue splicing while true |\n| ...elementN | <code>\\*</code> | the elements to add to the array |\n\n**Example**  \n```js\n> letters = [\"a\", \"a\", \"b\"]\n[ 'a', 'a', 'b' ]\n\n> a.spliceWhile(letters, 0, /a/, \"x\")\n[ 'a', 'a' ]\n\n> letters\n[ 'x', 'b' ]\n```\n<a name=\"module_array-tools.extract\"></a>\n### a.extract(array, query) ⇒ <code>Array</code>\nRemoves items from `array` which satisfy the query. Modifies the input array, returns the extracted.\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Returns**: <code>Array</code> - the extracted items.  \n**Category**: chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | the input array, modified directly |\n| query | <code>function</code> &#124; <code>object</code> | Per item in the array, if either the function returns truthy or the exists query is satisfied, the item is extracted |\n\n<a name=\"module_array-tools.flatten\"></a>\n### a.flatten(array) ⇒ <code>Array</code>\nflatten an array of arrays into a single array\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n**Since**: 1.4.0  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | the input array |\n\n**Example**  \n```js\n> numbers = [ 1, 2, [ 3, 4 ], 5 ]\n> a.flatten(numbers)\n[ 1, 2, 3, 4, 5 ]\n```\n<a name=\"module_array-tools.sortBy\"></a>\n### a.sortBy(arrayOfObjects, columns, customOrder) ⇒ <code>Array</code>\nSort an array of objects by one or more fields\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: chainable  \n**Since**: 1.5.0  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arrayOfObjects | <code>Array.&lt;object&gt;</code> | input array |\n| columns | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | column name(s) to sort by |\n| customOrder | <code>object</code> | specific sort orders, per columns |\n\n**Example**  \n```js\n>  var fixture = [\n    { a: 4, b: 1, c: 1},\n    { a: 4, b: 3, c: 1},\n    { a: 2, b: 2, c: 3},\n    { a: 2, b: 2, c: 2},\n    { a: 1, b: 3, c: 4},\n    { a: 1, b: 1, c: 4},\n    { a: 1, b: 2, c: 4},\n    { a: 3, b: 3, c: 3},\n    { a: 4, b: 3, c: 1}\n];\n> a.sortBy(fixture, [\"a\", \"b\", \"c\"])\n[ { a: 1, b: 1, c: 4 },\n  { a: 1, b: 2, c: 4 },\n  { a: 1, b: 3, c: 4 },\n  { a: 2, b: 2, c: 2 },\n  { a: 2, b: 2, c: 3 },\n  { a: 3, b: 3, c: 3 },\n  { a: 4, b: 1, c: 1 },\n  { a: 4, b: 3, c: 1 },\n  { a: 4, b: 3, c: 1 } ]\n```\n<a name=\"module_array-tools.exists\"></a>\n### a.exists(array, value) ⇒ <code>boolean</code>\nreturns true if a value, or nested object value exists in an array\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: not chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| array | <code>Array</code> | the array to search |\n| value | <code>\\*</code> | the value to search for |\n\n**Example**  \n```js\n> a.exists([ 1, 2, 3 ], 2)\ntrue\n\n> a.exists([ { result: false }, { result: false } ], { result: true })\nfalse\n\n> a.exists([ { result: true }, { result: false } ], { result: true })\ntrue\n\n> a.exists([ { result: true }, { result: true } ], { result: true })\ntrue\n```\n<a name=\"module_array-tools.findWhere\"></a>\n### a.findWhere(arrayOfObjects, query) ⇒ <code>object</code>\nreturns the first item from `arrayOfObjects` where key/value pairs\nfrom `query` are matched identically\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: not chainable  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arrayOfObjects | <code>Array.&lt;object&gt;</code> | the array to search |\n| query | <code>object</code> | an object containing the key/value pairs you want to match |\n\n**Example**  \n```js\n> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n\n> a.findWhere(dudes, { age: 8})\n{ name: 'Jim', age: 8 }\n```\n<a name=\"module_array-tools.last\"></a>\n### a.last(arr) ⇒ <code>\\*</code>\nReturn the last item in an array.\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: not chainable  \n**Since**: 1.7.0  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arr | <code>Array</code> | the input array |\n\n<a name=\"module_array-tools.remove\"></a>\n### a.remove(arr, toRemove) ⇒ <code>\\*</code>\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Category**: not chainable  \n**Since**: 1.8.0  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arr | <code>Array</code> | the input array |\n| toRemove | <code>\\*</code> | the item to remove |\n\n<a name=\"module_array-tools.contains\"></a>\n### a.contains(arr, value) ⇒\nSearches the array for the exact value supplied (strict equality). To query for value existance using an expression or function, use [exists](#module_array-tools.exists).\n\n**Kind**: static method of <code>[array-tools](#module_array-tools)</code>  \n**Returns**: boolean  \n**Category**: not chainable  \n**Since**: 1.8.0  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| arr | <code>Array</code> | the input array |\n| value | <code>\\*</code> | the value to look for |\n\n\n* * * \n\n&copy; 2015 Lloyd Brookes <75pound@gmail.com>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/array-tools/issues"
  },
  "_id": "array-tools@1.8.6",
  "dist": {
    "shasum": "1f135a11300cb9e321b8aa3bce62e48040eed0e4"
  },
  "_from": "array-tools@^1.1.0",
  "_resolved": "https://registry.npmjs.org/array-tools/-/array-tools-1.8.6.tgz"
}
