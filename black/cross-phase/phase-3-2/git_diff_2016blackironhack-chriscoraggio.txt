diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/circles.js b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/circles.js
new file mode 100644
index 0000000..dbf27f4
--- /dev/null
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/circles.js
@@ -0,0 +1,357 @@
+// circles
+// copyright Artan Sinani
+// https://github.com/lugolabs/circles
+
+/*
+  Lightwheight JavaScript library that generates circular graphs in SVG.
+
+  Call Circles.create(options) with the following options:
+
+    id         - the DOM element that will hold the graph
+    radius     - the radius of the circles
+    width      - the width of the ring (optional, has value 10, if not specified)
+    value      - init value of the circle (optional, defaults to 0)
+    maxValue   - maximum value of the circle (optional, defaults to 100)
+    text       - the text to display at the centre of the graph (optional, the current "htmlified" value will be shown if not specified)
+                 if `null` or an empty string, no text will be displayed
+                 can also be a function: the returned value will be the displayed text
+                     ex1. function(currentValue) {
+                              return '$'+currentValue;
+                          }
+                     ex2.  function() {
+                               return this.getPercent() + '%';
+                           }
+    colors     - an array of colors, with the first item coloring the full circle
+                 (optional, it will be `['#EEE', '#F00']` if not specified)
+    duration   - value in ms of animation duration; (optional, defaults to 500);
+                 if 0 or `null` is passed, the animation will not run
+    wrpClass     - class name to apply on the generated element wrapping the whole circle.
+    textClass:   - class name to apply on the generated element wrapping the text content.
+
+    API:
+      updateRadius(radius) - regenerates the circle with the given radius (see spec/responsive.html for an example hot to create a responsive circle)
+      updateWidth(width) - regenerates the circle with the given stroke width
+      updateColors(colors) - change colors used to draw the circle
+      update(value, duration) - update value of circle. If value is set to true, force the update of displaying
+      getPercent() - returns the percentage value of the circle, based on its current value and its max value
+      getValue() - returns the value of the circle
+      getMaxValue() - returns the max value of the circle
+       getValueFromPercent(percentage) - returns the corresponding value of the circle based on its max value and given percentage
+       htmlifyNumber(number, integerPartClass, decimalPartClass) - returned HTML representation of given number with given classes names applied on tags
+
+*/
+
+(function(root, factory) {
+  if(typeof exports === 'object') {
+    module.exports = factory();
+  }
+  else if(typeof define === 'function' && define.amd) {
+    define([], factory);
+  }
+  else {
+    root.Circles = factory();
+  }
+
+
+}(this, function() {
+
+  "use strict";
+
+  var requestAnimFrame = window.requestAnimationFrame       ||
+                     window.webkitRequestAnimationFrame ||
+                     window.mozRequestAnimationFrame    ||
+                     window.oRequestAnimationFrame      ||
+                     window.msRequestAnimationFrame     ||
+                     function (callback) {
+                       setTimeout(callback, 1000 / 60);
+                     },
+
+  Circles = function(options) {
+    var elId = options.id;
+    this._el = document.getElementById(elId);
+
+    if (this._el === null) return;
+
+    this._radius         = options.radius || 10;
+    this._duration       = options.duration === undefined ? 500 : options.duration;
+
+    this._value          = 0;
+    this._maxValue       = options.maxValue || 100;
+
+    this._text           = options.text === undefined ? function(value){return this.htmlifyNumber(value);} : options.text;
+    this._strokeWidth    = options.width  || 10;
+    this._colors         = options.colors || ['#EEE', '#F00'];
+    this._svg            = null;
+    this._movingPath     = null;
+    this._wrapContainer  = null;
+    this._textContainer  = null;
+
+    this._wrpClass       = options.wrpClass || 'circles-wrp';
+    this._textClass      = options.textClass || 'circles-text';
+
+    this._valClass       = options.valueStrokeClass || 'circles-valueStroke';
+    this._maxValClass    = options.maxValueStrokeClass || 'circles-maxValueStroke';
+
+    this._styleWrapper   = options.styleWrapper === false ? false : true;
+    this._styleText      = options.styleText === false ? false : true;
+
+    var endAngleRad      = Math.PI / 180 * 270;
+    this._start          = -Math.PI / 180 * 90;
+    this._startPrecise   = this._precise(this._start);
+    this._circ           = endAngleRad - this._start;
+
+    this._generate().update(options.value || 0);
+  };
+
+  Circles.prototype = {
+    VERSION: '0.0.6',
+
+    _generate: function() {
+
+      this._svgSize        = this._radius * 2;
+      this._radiusAdjusted = this._radius - (this._strokeWidth / 2);
+
+      this._generateSvg()._generateText()._generateWrapper();
+
+      this._el.innerHTML = '';
+      this._el.appendChild(this._wrapContainer);
+
+      return this;
+    },
+
+    _setPercentage: function(percentage) {
+      this._movingPath.setAttribute('d', this._calculatePath(percentage, true));
+      this._textContainer.innerHTML	=	this._getText(this.getValueFromPercent(percentage));
+    },
+
+    _generateWrapper: function() {
+      this._wrapContainer	=	document.createElement('div');
+      this._wrapContainer.className = this._wrpClass;
+
+      if (this._styleWrapper) {
+        this._wrapContainer.style.position	=	'relative';
+        this._wrapContainer.style.display	=	'inline-block';
+      }
+
+      this._wrapContainer.appendChild(this._svg);
+      this._wrapContainer.appendChild(this._textContainer);
+
+      return this;
+    },
+
+    _generateText: function() {
+
+      this._textContainer = document.createElement('div');
+      this._textContainer.className = this._textClass;
+
+      if (this._styleText) {
+        var style	=	{
+          position:   'absolute',
+          top:        0,
+          left:       0,
+          textAlign:  'center',
+          width:      '100%',
+          fontSize:   (this._radius * .7) + 'px',
+          height:     this._svgSize + 'px',
+          lineHeight: this._svgSize + 'px'
+        };
+
+        for(var prop in style) {
+          this._textContainer.style[prop]	=	style[prop];
+        }
+      }
+
+      this._textContainer.innerHTML	=	this._getText(0);
+      return this;
+    },
+
+    _getText: function(value) {
+      if (!this._text) return '';
+
+      if (value === undefined) value = this._value;
+
+      value = parseFloat(value.toFixed(2));
+
+      return typeof this._text === 'function' ? this._text.call(this, value) : this._text;
+    },
+
+    _generateSvg: function() {
+
+      this._svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
+      this._svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
+      this._svg.setAttribute('width', this._svgSize);
+      this._svg.setAttribute('height', this._svgSize);
+
+      this._generatePath(100, false, this._colors[0], this._maxValClass)._generatePath(1, true, this._colors[1], this._valClass);
+
+      this._movingPath = this._svg.getElementsByTagName('path')[1];
+
+      return this;
+    },
+
+    _generatePath: function(percentage, open, color, pathClass) {
+      var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
+      path.setAttribute('fill', 'transparent');
+      path.setAttribute('stroke', color);
+      path.setAttribute('stroke-width', this._strokeWidth);
+      path.setAttribute('d',  this._calculatePath(percentage, open));
+      path.setAttribute('class', pathClass);
+
+      this._svg.appendChild(path);
+
+      return this;
+    },
+
+    _calculatePath: function(percentage, open) {
+      var end      = this._start + ((percentage / 100) * this._circ),
+        endPrecise = this._precise(end);
+      return this._arc(endPrecise, open);
+    },
+
+    _arc: function(end, open) {
+      var endAdjusted = end - 0.001,
+        longArc       = end - this._startPrecise < Math.PI ? 0 : 1;
+
+      return [
+        'M',
+        this._radius + this._radiusAdjusted * Math.cos(this._startPrecise),
+        this._radius + this._radiusAdjusted * Math.sin(this._startPrecise),
+        'A', // arcTo
+        this._radiusAdjusted, // x radius
+        this._radiusAdjusted, // y radius
+        0, // slanting
+        longArc, // long or short arc
+        1, // clockwise
+        this._radius + this._radiusAdjusted * Math.cos(endAdjusted),
+        this._radius + this._radiusAdjusted * Math.sin(endAdjusted),
+        open ? '' : 'Z' // close
+      ].join(' ');
+    },
+
+    _precise: function(value) {
+      return Math.round(value * 1000) / 1000;
+    },
+
+    /*== Public methods ==*/
+
+    htmlifyNumber: function(number, integerPartClass, decimalPartClass) {
+
+      integerPartClass = integerPartClass || 'circles-integer';
+      decimalPartClass = decimalPartClass || 'circles-decimals';
+
+      var parts = (number + '').split('.'),
+          html  = '<span class="' + integerPartClass + '">' + parts[0]+'</span>';
+
+      if (parts.length > 1) {
+              html += '.<span class="' + decimalPartClass + '">' + parts[1].substring(0, 2) + '</span>';
+          }
+      return html;
+    },
+
+    updateRadius: function(radius) {
+      this._radius = radius;
+
+      return this._generate().update(true);
+    },
+
+    updateWidth: function(width) {
+      this._strokeWidth = width;
+
+      return this._generate().update(true);
+    },
+
+    updateColors: function(colors) {
+      this._colors = colors;
+
+      var paths = this._svg.getElementsByTagName('path');
+
+      paths[0].setAttribute('stroke', colors[0]);
+      paths[1].setAttribute('stroke', colors[1]);
+
+      return this;
+    },
+
+    getPercent: function() {
+      return (this._value * 100) / this._maxValue;
+    },
+
+    getValueFromPercent: function(percentage) {
+      return (this._maxValue * percentage) / 100;
+    },
+
+    getValue: function()
+    {
+      return this._value;
+    },
+
+    getMaxValue: function()
+    {
+      return this._maxValue;
+    },
+
+    update: function(value, duration) {
+      if (value === true) {//Force update with current value
+        this._setPercentage(this.getPercent());
+        return this;
+      }
+
+      if (this._value == value || isNaN(value)) return this;
+      if (duration === undefined) duration = this._duration;
+
+      var self          = this,
+          oldPercentage = self.getPercent(),
+          delta         = 1,
+          newPercentage, isGreater, steps, stepDuration;
+
+      this._value = Math.min(this._maxValue, Math.max(0, value));
+
+      if (!duration) {//No duration, we can't skip the animation
+        this._setPercentage(this.getPercent());
+        return this;
+      }
+
+      newPercentage   = self.getPercent();
+      isGreater       = newPercentage > oldPercentage;
+
+      delta           += newPercentage % 1; //If new percentage is not an integer, we add the decimal part to the delta
+      steps           = Math.floor(Math.abs(newPercentage - oldPercentage) / delta);
+      stepDuration    = duration / steps;
+
+
+      (function animate(lastFrame) {
+        if (isGreater)
+         oldPercentage += delta;
+        else
+         oldPercentage -= delta;
+
+        if ((isGreater && oldPercentage >= newPercentage) || (!isGreater && oldPercentage <= newPercentage))
+        {
+          requestAnimFrame(function(){ self._setPercentage(newPercentage); });
+          return;
+        }
+
+        requestAnimFrame(function() { self._setPercentage(oldPercentage); });
+
+        var now     = Date.now(),
+          deltaTime = now - lastFrame;
+
+        if (deltaTime >= stepDuration) {
+          animate(now);
+        } else {
+          setTimeout(function() {
+            animate(Date.now());
+          }, stepDuration - deltaTime);
+        }
+
+      })(Date.now());
+
+      return this;
+    }
+  };
+
+  Circles.create = function(options) {
+    return new Circles(options);
+  };
+
+  return Circles;
+}));
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/get_lat_lng.js b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/get_lat_lng.js
index 417ed6d..11004cc 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/get_lat_lng.js
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/get_lat_lng.js
@@ -1,5 +1,9 @@
-function getLatLng(city_id){
-	$.getJSON({ url: "http://www.ncdc.noaa.gov/cdo-web/api/v2/stations?locationid=" + city_id,
+var locat;
+
+function getLatLng(city_id, name){
+	$.getJSON({
+        url: "http://www.ncdc.noaa.gov/cdo-web/api/v2/stations?locationid=" + city_id,
+        async: false,
       headers:{
         token: "BJeRYDACOJoPYouWqSbOBnuAzVOtHNQk"
       }
@@ -9,18 +13,28 @@ function getLatLng(city_id){
     										"lat": data.results[0].latitude,
     										"lng": data.results[0].longitude
     									};
-    	addPointToMap(city_to_id_and_latlng);
+    	addPointToMap(city_to_id_and_latlng, name);
+        locat = city_to_id_and_latlng;
     })
 }
 
 function submitPressed(){
 	var names = [];
 	resetMarkers();
+
 	var e = document.getElementById("startpoint");
 	names.push(e.options[e.selectedIndex].text);
-	getLatLng(e.options[e.selectedIndex].id);
+    getLatLng(e.options[e.selectedIndex].id, e.options[e.selectedIndex].text);
+    var port = getClosestAirport(locat);
+    addPointToMap(port, port.name);
+    names.push(port.name);
+
 	e = document.getElementById("endpoint");
 	names.push(e.options[e.selectedIndex].text);
-	getLatLng(e.options[e.selectedIndex].id);
+	getLatLng(e.options[e.selectedIndex].id, e.options[e.selectedIndex].text);
+    port = getClosestAirport(locat);
+    addPointToMap(port, port.name);
+    names.push(port.name);
+
 	fillInSpaces(names);
 }
\ No newline at end of file
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/index.html b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/index.html
index eacc597..94e7a70 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/index.html
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/index.html
@@ -5,13 +5,16 @@
 	<meta name="description" content="A Virus Tracker for the United States">
 	<meta name="author" content="Chris Coraggio">
 
-	<script src="js/get_states.js"></script>
-	<script src="js/get_lat_lng.js"></script>
-	<script src="js/report.js"></script>
 	<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
 	<!-- <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"> -->
   	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
 
+	<script src="js/get_states.js"></script>
+	<script src="js/get_lat_lng.js"></script>
+	<script src="js/report.js"></script>
+	<script src="js/circles.js"></script>
+	<script async defer src="js/map-maker.js"></script>
+	
 	<title>Should I Stay or Should I Go</title>
 
 	<!-- Latest compiled and minified CSS -->
@@ -51,7 +54,7 @@
 	  				<p>To: <input type="text" class="datepicker"></p>
 	  			</div>
 	  			<div class="row" id="report-container">
-	  				
+	  				<!-- filled dynamically with JS -->
 	  			</div>
   			</div>
 		</div>
@@ -70,10 +73,7 @@
 
   <!-- Latest compiled and minified JavaScript -->
 	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
-
-	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiXdNvw4_e5ZGuFLCj_gLlV3v0L-Ely6c"></script>
+	<script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3&libraries=geometry&key=AIzaSyCiXdNvw4_e5ZGuFLCj_gLlV3v0L-Ely6c"></script>
 	<script src="http://d3js.org/d3.v3.min.js"></script>
-	<script async defer src="js/map-maker.js"></script>
-
 
 </html>
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/map-maker.js b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/map-maker.js
index 8e0d161..02427bb 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/map-maker.js
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/map-maker.js
@@ -1,5 +1,6 @@
   var map;
   var markers = [];
+  var airports = [];
 
   $(document).ready(function(){
       //create the map, import geojson and proportional circles based on population   
@@ -9,19 +10,48 @@
         center: new google.maps.LatLng(40.4237, -86.9212),
         mapTypeId: 'roadmap',
       });
+      getAirports();
+      initDiv();
   })
 
+function getAirports(){
+  $.getJSON("resources\\airports.json", function(data){
+        const airport_data = JSON.parse(data);
+        console.log(airport_data);
+        for (var i = 0; i < airport_data['airports'].length; i++){
+          airports.push(airport_data['airports'][i]);
+        }
+        console.log(airport_data['airports'][0].lat);
+      })
+  .fail(function(){
+    alert("IT freaking didn't worked!");
+  })
+  console.log("End")
+}
+
+function initDiv(){
+  map.data.addListener('click', (function(event){
+        //displays the name on click
+        alert(event.feature);
+         new google.maps.InfoWindow({
+          content: "<div id='content'>" + "Testing" + event.feature.getProperty("title") + "</div>",
+          position: new google.maps.LatLng(event.feature.getProperty('LATITUDE'), event.feature.getProperty('LONGITUDE'))
+        }).open(map)
+      }))
+}
+
 
-function addPointToMap(point_to_add){
+function addPointToMap(point_to_add, title){
+  if (typeof title === 'undefined') { title = 'Start/End'; }
   markers.push(new google.maps.Marker({
     position: new google.maps.LatLng(point_to_add.lat, point_to_add.lng),
-    map
+    map,
+    title
   }));
   refitMap();
 }
 
 function refitMap(){
-  console.log(markers)
   const bounds = new google.maps.LatLngBounds();
   for (var i = 0; i < markers.length; i++) {
     bounds.extend(markers[i].getPosition());
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/report.js b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/report.js
index ed0ff40..30eb2a7 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-chriscoraggio/report.js
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/report.js
@@ -1,8 +1,47 @@
 function fillInSpaces(names_of_cities){
 	console.log("Filling in spaces")
+	var count = 0;
 	const spacing_number = 12 / names_of_cities.length;
 	names_of_cities.forEach(function(name){
 		console.log(name);
 		$("#report-container").append("<div class=\" report-city col-md-" + spacing_number + "\">" + name + "</div>");
 	});
+	$(".report-city").each(function(){
+		$(this).append("<div class=\" circle city-info\" id=\"" + count + "\"></div>");
+		var value = getRandomInt(0, 101);
+		Circles.create({
+			id: count,
+			value,
+			radius: 50,
+			width: 10,
+			number: 7.13,
+			text: "" + value + "%",
+			colors:     ['#D3B6C6', '#4B253A'],
+    		duration:   400
+		})
+		count++;
+	})
 }
+
+function getRandomInt(min, max) {
+  min = Math.ceil(min);
+  max = Math.floor(max);
+  return Math.floor(Math.random() * (max - min)) + min;
+}
+
+function getClosestAirport(locat){
+	var shortest_distance = 1000000;
+	var closest_airport = locat;
+	airports.forEach(function(airport){
+		var new_distance = google.maps.geometry.spherical.computeDistanceBetween(
+			new google.maps.LatLng(locat.lat, locat.lng), new google.maps.LatLng(airport.lat, airport.lng));
+		if(shortest_distance > new_distance){
+			shortest_distance = new_distance;
+			closest_airport = airport;
+		}
+	})
+	console.log(closest_airport);
+	return closest_airport;
+}
+
+//google.maps.geometry.spherical.computeDistanceBetween (latLngA, latLngB);
\ No newline at end of file
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/resources/airports.json b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/resources/airports.json
new file mode 100644
index 0000000..87bbd09
--- /dev/null
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase3-public/2016blackironhack-chriscoraggio/resources/airports.json
@@ -0,0 +1 @@
+"{\"airports\": [{\"name\": \"Michael Army Airfield (DPG)\", \"lat\": \"40.199387\", \"lng\": \"-112.937469\"},{\"name\": \"Emerald Coast Aviation, Crestview, FL, USA\", \"lat\": \"30.781055\", \"lng\": \"-86.524994\"},{\"name\": \"Preston Smith International Airport, Lubbock, TX, USA\", \"lat\": \"33.656384\", \"lng\": \"-101.821861\"},{\"name\": \"Eagle Landing Airport LZ, Avinger, TX, US\", \"lat\": \"32.886677\", \"lng\": \"-94.599251\"},{\"name\": \"Greater Rochester International Airport, Rochester, NY, US\", \"lat\": \"43.128002\", \"lng\": \"-77.665474\"},{\"name\": \"Warrenton-Fauquier Airport (KHWY), Midland, VA, USA\", \"lat\": \"38.592724\", \"lng\": \"-77.711441\"},{\"name\": \"Fountain Hills, AZ, USA\", \"lat\": \"33.603374\", \"lng\": \"-111.730782\"},{\"name\": \"San Diego International Airport (SAN), San Diego, CA, USA\", \"lat\": \"32.731770\", \"lng\": \"-117.197624\"},{\"name\": \"Hurley Marine, Inc., Escanaba, MI, USA\", \"lat\": \"45.733051\", \"lng\": \"-87.062416\"},{\"name\": \"Mc Donald Field, Marshville, NC, USA\", \"lat\": \"35.053238\", \"lng\": \"-80.409195\"},{\"name\": \"Nashville International Airport (BNA), Nashville, TN, USA\", \"lat\": \"36.131687\", \"lng\": \"-86.668823\"},{\"name\": \"Lackland AFB, San Antonio, TX, USA\", \"lat\": \"29.384344\", \"lng\": \"-98.618645\"},{\"name\": \"Seattle-Tacoma International Airport, Seattle, WA, USA\", \"lat\": \"47.443546\", \"lng\": \"-122.301659\"},{\"name\": \"McGhee Tyson Airport (TYS), Alcoa, TN, USA\", \"lat\": \"35.805813\", \"lng\": \"-83.989815\"},{\"name\": \"Kenai Municipal Airport, Kenai, AK, USA\", \"lat\": \"60.567402\", \"lng\": \"-151.246719\"},{\"name\": \"Rafha Domestic Airport (RAH), Rafha, Saudi Arabia\", \"lat\": \"29.626110\", \"lng\": \"43.490555\"},{\"name\": \"Eau Claire, WI, USA\", \"lat\": \"44.811348\", \"lng\": \"-91.498497\"},{\"name\": \"Fort Gordon, Augusta, GA, USA\", \"lat\": \"33.420696\", \"lng\": \"-82.152374\"},{\"name\": \"Mineta San Jos\\u00e9 International Airport (SJC), San Jose, CA, USA\", \"lat\": \"37.363949\", \"lng\": \"-121.928940\"},{\"name\": \"Hartsfield-Jackson Atlanta International Airport, Atlanta, GA, USA\", \"lat\": \"33.640411\", \"lng\": \"-84.419853\"},{\"name\": \"Santa Fe Municipal Airport (SAF), Santa Fe, NM, USA\", \"lat\": \"35.617500\", \"lng\": \"-106.088333\"},{\"name\": \"Delta County Airport (ESC), Escanaba, MI, USA\", \"lat\": \"45.719906\", \"lng\": \"-87.094070\"},{\"name\": \"Cincinnati/Northern Kentucky International Airport (CVG), Hebron, KY\", \"lat\": \"39.053276\", \"lng\": \"-84.663017\"},{\"name\": \"San Diego International Airport (SAN), San Diego, CA, US\", \"lat\": \"32.732346\", \"lng\": \"-117.196053\"},{\"name\": \"Collbran, CO, USA\", \"lat\": \"39.240536\", \"lng\": \"-107.961182\"},{\"name\": \"Falcon Field Airport, Mesa, AZ, USA\", \"lat\": \"33.457439\", \"lng\": \"-111.727386\"},{\"name\": \"Vamo, FL, USA\", \"lat\": \"27.223188\", \"lng\": \"-82.491188\"},{\"name\": \"Ypsilanti, MI, USA\", \"lat\": \"42.241150\", \"lng\": \"-83.612991\"},{\"name\": \"John Wayne Airport (SNA)\", \"lat\": \"33.678925\", \"lng\": \"-117.862869\"},{\"name\": \"San Francisco International Airport (SFO)\", \"lat\": \"37.615223\", \"lng\": \"-122.389977\"},{\"name\": \"Hunter Army Airfield Chapel, Savannah, GA, USA\", \"lat\": \"32.015644\", \"lng\": \"-81.143127\"},{\"name\": \"Los Angeles International Airport, Los Angeles, CA, USA\", \"lat\": \"33.942791\", \"lng\": \"-118.410042\"},{\"name\": \"Grand Prairie, TX, USA\", \"lat\": \"32.738773\", \"lng\": \"-97.003098\"},{\"name\": \"Dover, OH, USA\", \"lat\": \"40.520618\", \"lng\": \"-81.474007\"},{\"name\": \"Billings, MT, USA\", \"lat\": \"45.787636\", \"lng\": \"-108.489304\"},{\"name\": \"North Las Vegas Airport (VGT), Las Vegas, USA\", \"lat\": \"36.213257\", \"lng\": \"-115.194572\"},{\"name\": \"Northern Lights Airport, Alburgh, VT, USA\", \"lat\": \"44.871201\", \"lng\": \"-73.286491\"},{\"name\": \"Roanoke, VA, US\", \"lat\": \"37.270969\", \"lng\": \"-79.941429\"},{\"name\": \"Winston-Salem, NC, USA\", \"lat\": \"36.099861\", \"lng\": \"-80.244217\"},{\"name\": \"Aiken, SC, USA\", \"lat\": \"33.566574\", \"lng\": \"-81.719398\"},{\"name\": \"McCarran International Airport (LAS), Las Vegas, NV, USA\", \"lat\": \"36.086010\", \"lng\": \"-115.153969\"},{\"name\": \"Cleveland, OH, USA\", \"lat\": \"41.505493\", \"lng\": \"-81.681290\"},{\"name\": \"Denver International Airport, Denver, CO\", \"lat\": \"39.849312\", \"lng\": \"-104.673828\"},{\"name\": \"Pocatello Regional Airport, Pocatello, ID\", \"lat\": \"42.915703\", \"lng\": \"-112.593040\"},{\"name\": \"Hatbox Field Airport, Muskogee, OK, USA\", \"lat\": \"35.748463\", \"lng\": \"-95.412529\"},{\"name\": \"Ozark, Arkansas, the United States\", \"lat\": \"35.489746\", \"lng\": \"-93.824272\"},{\"name\": \"Unalakleet Airport (UNK), Unalakleet, AK, USA\", \"lat\": \"63.889515\", \"lng\": \"-160.799927\"},{\"name\": \"Boone County Regional Airport (HRO), Harrison, AR, USA\", \"lat\": \"36.264206\", \"lng\": \"-93.154961\"},{\"name\": \"St George Municipal Airport (SGU), St. George, UT, USA\", \"lat\": \"37.030792\", \"lng\": \"-113.508987\"},{\"name\": \"General Mitchell International Airport (MKE), Milwaukee, WI, USA\", \"lat\": \"42.949890\", \"lng\": \"-87.900414\"}]}"
\ No newline at end of file
