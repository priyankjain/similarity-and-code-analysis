diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/.gitignore b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/.gitignore
new file mode 100644
index 0000000..0d20b64
--- /dev/null
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/.gitignore
@@ -0,0 +1 @@
+*.pyc
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/Procfile b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/Procfile
index d5e2bb1..7fef37c 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/Procfile
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/Procfile
@@ -1 +1 @@
-web: python server.py
\ No newline at end of file
+web: gunicorn --config gunicorn_config.txt server:app
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/README.md b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/README.md
index fcb1904..bf96cee 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/README.md
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/README.md
@@ -20,13 +20,31 @@ Datasets
 --------
 * NOAA 1981-2010 Climate Normals 
     - ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-cldd-base57.txt
-    - Monthly cooling degree day data
-    - The month column corresponding to the date of travel will be used
+    - Text data
+    - The month column corresponding to the date of travel is used
+    - Data is available for the entire US
+
+* Zika Cases Reported in the United States
+    - http://www.cdc.gov/zika/intheus/maps-zika-us.html 
+    - Table data
+    - The number of cases for the corresponding state is used
+    - Data is available for the entire US
+
+* 2015 American Community Survey Subject Tables
+    - http://api.census.gov/data/2015/acs1
+    - JSON data
+    - The population of the corresponding county or state is used
+    - Data is available for the entire US
+
+* Compressed Mortality File 1999-2014 on CDC WONDER Online Database
+    - http://wonder.cdc.gov/cmf-icd10.html
+    - Table data
+    - Annual deaths per 1,000,000 in the USA by several causes is used
     - Data is available for the entire US
 
 * Y The primary dataset "online climate data" from data.gov is used
 
-* Y All datasets used are from data.gov
+* Y All datasets used are from the US government
 
 Description
 -----------
@@ -51,7 +69,7 @@ The website shows the destination on a map and estimates the disease risk on tha
     2. N The gauge is not interactive (may add interactive chart of multiple risk factors)
 
 * Interaction Form
-    1. y Information about climate, mosquito activity, and risk will be output
+    1. Y Information about climate, mosquito activity, and cases of Zika in the state is output
     2. y The user will be able to change the date and destination of travel to see how risk is changed
     3. Y The user inputs their date of travel and destination
     4. y If the user changes the date and destination of travel, the map will be updated based on the climate and location
@@ -61,8 +79,11 @@ Build Case
 ----------
 * Dependencies
     - python
+    - gunicorn
     - flask
     - flask-cors
+    - numpy
+    - beautifulsoup4
 
 * Building
     sudo apt-get install python python-flask python-pip
@@ -70,7 +91,7 @@ Build Case
 
 * Usage
     1. Start the flask server with `python server.py`
-    2. Open 'index.html' in Google Chrome
+    2. Open Google Chrome and go to 127.0.0.1:5000
     3. Enter data into the form and click 'Submit'
 
 Testing
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/gunicorn_config.txt b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/gunicorn_config.txt
new file mode 100644
index 0000000..0438850
--- /dev/null
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/gunicorn_config.txt
@@ -0,0 +1,2 @@
+forwarded_allow_ips = '*'
+secure_scheme_headers = {'X-FORWARDED-PROTO': 'https',}
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/index.html b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/index.html
index 42d9fe8..bd02a80 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/index.html
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/index.html
@@ -19,6 +19,10 @@
 
     <link rel='stylesheet' href='static/style.css' type='text/css'>
 
+    <script type="text/javascript">
+        var $SCRIPT_ROOT = {{ request.script_root|tojson|safe }};
+    </script>
+
 </head>
 
 <body>
@@ -27,8 +31,6 @@
             <div class="navbar-header">
                 <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                     <span class="icon-bar"></span>
-                    <span class="icon-bar"></span>
-                    <span class="icon-bar"></span>
                 </button>
                 <!--            TODO should go to #home-->
                 <a class="navbar-brand" href="#"></a>
@@ -53,21 +55,34 @@
                 <h1>Travel information</h1>
                 <p class="lead">Where are you going?</p>
                 <div class="row">
-                    <div class="col-md-3">
+                    <div class="col-md-6">
+                        <div class="col-md-12">
                             <form>
-                            <p>Zip code:
-                                <input type=text size="10" name="destination" value="68339">
-                            </p>
-                            <p>Date of travel:
-                                <input type="text" id="datepicker" size="10" name="date">
-                            </p>
-                            <p>
-                                <input type="submit" id="submit">
-                            </p>
+                                <label for="destination">
+                                    Destination:
+                                </label>
+                                <br/>
+                                <input type=text id="destination" size="25" name="destination" title="Destination address" placeholder='e.g. "60613" or "Chicago, IL"' required>
+                                <br/>
+                                <label for="date">
+                                        Date of travel:
+                                </label>
+                                <br/>
+                                <input type="date" id="date" size="10" name="date" title="Date" pattern="^\d{2}/\d{2}/\d{4}$" placeholder="MM/DD/YYYY" required>
+                                <br/>
+                                <input type="submit" id="submit" class="disabled" title="Please fill out the required values" disabled>
                             </form>
                         </div>
-                    <div class="col-md-3">
-                        <div id="gauge" style="min-width: 310px; max-width: 400px; height: 300px; margin: 0 auto"></div>
+                        <div class="row">
+                            <div class="col-md-5">
+                                <div id="gauge"></div>
+                            </div>
+                            <div class="col-md-7" id="result">
+                            </div>
+                        </div>
+                        <div class="row">
+                          <div id="ladder"></div>
+                        </div>
                     </div>
                     <div class="col-md-6">
                         <div id="map">Right panel</div>
@@ -83,9 +98,26 @@
                 </div>
             </div>
             <div role="tabpanel" class="tab-pane fade" id="about">
-                <h1>About</h1></div>
+                <h1>About</h1>
+                
+                <h2>Data sources</h2>
+                <div class="references">
+                  <p>
+                    Centers for Disease Control and Prevention, National Center for Health Statistics. Compressed Mortality File 1999-2014 on CDC WONDER Online Database, released December 2015. Data are from the Compressed Mortality File 1999-2014 Series 20 No. 2T, 2015, as compiled from data provided by the 57 vital statistics jurisdictions through the Vital Statistics Cooperative Program. Accessed at <a href="http://wonder.cdc.gov/cmf-icd10.html">http://wonder.cdc.gov/cmf-icd10.html</a> on Oct 1, 2016.</p>
+              </div>
+                <h2>References</h2>
+                <div class="references">
+
+                    <p>Chen, S., Blanford, J. I., Fleischer, S. J., Hutchinson, M., Saunders, M. C., &amp; Thomas, M. B. (2013). Estimating West Nile Virus Transmission Period in Pennsylvania Using an Optimized Degree-Day Model. Vector Borne and Zoonotic Diseases, 13(7), 489â€“497. <a href="http://doi.org/10.1089/vbz.2012.1094">http://doi.org/10.1089/vbz.2012.1094</a></p>
+                    <p>Waldock, J., Chandra, N. L., Lelieveld, J., Proestos, Y., Michael, E., Christophides, G., &amp; Parham, P. E. (2013). The role of environmental variables on Aedes albopictus biology and chikungunya epidemiology. Pathogens and Global Health, 107(5), 224â€“241. <a href="http://doi.org/10.1179/2047773213Y.0000000100">http://doi.org/10.1179/2047773213Y.0000000100</a></p>
+                </div>
+
+            </div>
             <div role="tabpanel" class="tab-pane fade" id="contact">
-                <h1>Contact</h1></div>
+                <h1>Contact</h1>
+                <p>Copyright 2016 Lenna X. Peterson</p>
+                <p><a href="http://www.github.com/lennax">github.com/lennax</a></p>
+            </div>
         </div>
     </div>
 
@@ -94,8 +126,10 @@
     <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
     <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDadi4nI9R8BtPsLjB8Lh31jB8kZ60hde0"></script>
     <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
+    <!-- Plotly.js -->
+    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
 
-    <script type="text/javascript" src="js/script.js"></script>
+    <script type="text/javascript" src="static/script.js"></script>
 
 </body>
 
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/requirements.txt b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/requirements.txt
index c6a438b..0933832 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/requirements.txt
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/requirements.txt
@@ -1,52 +1,7 @@
-Flask==0.10.1
-Jinja2==2.7.3
-MarkupSafe==0.23
-MySQL-python==1.2.5
-Pillow==2.3.2
-PyMySQL==0.6.6
-PyYAML==3.11
-Pygments==2.0.2
-WebOb==1.4
-Werkzeug==0.9.6
-ansible==2.0.0.2
-beanstalkc==0.4.0
-boto==2.34.0
-bugsnag==2.1.0
-cffi==0.8.6
-click==4.1
-configobj==5.0.6
-coverage==3.7.1
-cryptography==0.6.1
-freezegun==0.3.4
-futures==3.0.3
-gunicorn==19.6.0
-honcho==0.6.6
-httpretty==0.8.10
-inflect==0.2.4
-itsdangerous==0.24
-lxml==3.2.5
-mitmproxy==0.10.1
-mock==1.0.1
-mycli==1.3.0
-netlib==0.10.1
-paramiko==1.7.7.1
-prompt-toolkit==0.45
-py==1.4.26
-pyOpenSSL==0.14
-pyasn1==0.1.7
-pycparser==2.10
-pycrypto==2.6.1
-pysqlite==2.6.3
-pytest==2.6.4
-python-dateutil==1.5
-readline==6.2.4.1
-requests==1.2.3
-requests-futures==0.9.5
-six==1.9.0
-sqlparse==0.1.14
-urwid==1.3.0
-virtualenv==1.11.6
-wcwidth==0.1.4
-wsgiref==0.1.2
-xmlbuilder==0.9
-flask-cors
+Flask >= 0.10.1
+Jinja2 >= 2.7.3
+Werkzeug >= 0.9.6
+gunicorn >= 19.6.0
+flask-cors >= 3.0.2
+numpy >= 1.8.2
+beautifulsoup4 >= 4.5.1
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/script.js b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/script.js
index 568641e..b06f6d6 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/script.js
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/script.js
@@ -2,39 +2,62 @@
 Copyright 2016 Lenna X. Peterson
 **/
 
+if (typeof MYAPPLICATION === "undefined") {
+  var MyApp = {};
+}
+
+MyApp.disableSubmit = function () {
   "use strict";
+  $('#submit').attr("disabled", "disabled").addClass("disabled").attr("title", "Please fill out required values");
+};
 
+// Client-side input validation
+MyApp.checkSubmit = function (e) {
+  "use strict";
+  if (MyApp.validData()) {
+    $('#submit').removeAttr("disabled").removeClass("disabled").attr("title", "Submit form");
+  } else {
+    MyApp.disableSubmit();
+  }
+};
 
-// Nav tabs
-$('#myNavTabs a').click(function (e) {
-    //console.log("click");
-    e.preventDefault();
-    $(this).tab('show');
-});
+MyApp.validData = function () {
+  "use strict";
+  var destinationLen = $('input[name="destination"]').val().length;
+  var dateVal = $('input[name="date"]').val();
+  //        console.log(destinationLen, destinationLen > 0);
+  //        console.log(dateVal);
+  //        console.log(/^\d{4}-\d{2}-\d{2}$/.test(dateVal));
+  return destinationLen && /^\d{4}-\d{2}-\d{2}$/.test(dateVal);
+};
 
-// Date picker
-$(function () {
-    $("#datepicker").datepicker({
-        minDate: 0,
-        changeMonth: true,
-        changeYear: true
-    });
-    $("#anim").on("change", function () {
-        $("#datepicker").datepicker("option", "showAnim", $(this).val());
-    });
-});
+MyApp.initMap = function () {
+  "use strict";
 
-// Gauge function
-google.charts.load('current', {
-    'packages': ['gauge']
-});
-//google.charts.setOnLoadCallback(drawChart);
+  // Geographic center of continental US
+  //var location = new google.maps.LatLng(39.8282, -98.5795);
 
-function drawChart() {
+  // Purdue
+  var location = new google.maps.LatLng(40.4237, -86.9212);
+
+  var mapCanvas = document.getElementById('map');
+  var mapOptions = {
+    center: location,
+    zoom: 12,
+    //            panControl: false,
+    mapTypeId: google.maps.MapTypeId.ROADMAP
+  };
+  // Not sure if this needs to be declared outside
+  MyApp.map = new google.maps.Map(mapCanvas, mapOptions);
+
+};
+
+MyApp.drawGauge = function (risk) {
+  "use strict";
 
   var data = google.visualization.arrayToDataTable([
     ['Label', 'Value'],
-          ['Risk', 10]
+    ['Risk', risk]
   ]);
 
   var options = {
@@ -53,40 +76,185 @@ function drawChart() {
   chart.draw(data, options);
 
   // setInterval(function () { // data.setValue(0, 1, 40 + Math.round(60 * Math.random())); // chart.draw(data, options); // }, 13000);  
-}
-
-// map
-var map;
-$(function () {
+};
 
-    function initMap() {
+MyApp.drawLadder = function (zcases) {
+  "use strict";
+  var cause = [
+'Heart disease',
+'Lung cancer',
+'Car crash',
+'Firearm homicide',
+'Plane crash',
+'Drowning in bathtub',
+'Arthropod-borne virus',
+'Lightning'
+  ];
+
+  var rate = [
+1440.6,
+524.8,
+140.3,
+38.8,
+2,
+1.3,
+0.3,
+0.10
+];
+
+  var breakpoint = 4;
+  
+  var smalltrace = {
+    type: 'scatter',
+    x: rate.slice(breakpoint, rate.length),
+    y: rate.slice(breakpoint, rate.length),
+    mode: 'markers+text',
+    text: cause.slice(breakpoint, cause.length),
+    textposition: 'right',
+    name: 'Deaths per 1M',
+    showlegend: false,
+    marker: {
+      color: 'rgba(156, 165, 196, 0.95)',
+      line: {
+        color: 'rgba(156, 165, 196, 1.0)',
+        width: 1,
+      },
+      symbol: 'circle',
+      size: 16
+    }
+  };
 
-        // Geographic center of continental US
-        var location = new google.maps.LatLng(39.8282, -98.5795);
+  var largetrace = {
+    type: 'scatter',
+    x: rate.slice(0, breakpoint),
+    y: rate.slice(0, breakpoint),
+    mode: 'markers+text',
+    text: cause.slice(0, breakpoint),
+    textposition: 'left',
+    name: 'Deaths per 1M in USA',
+    //showlegend: false,
+    marker: {
+      color: 'rgba(156, 165, 196, 0.95)',
+      line: {
+        color: 'rgba(156, 165, 196, 1.0)',
+        width: 1,
+      },
+      symbol: 'circle',
+      size: 16
+    }
+  };
 
-        var mapCanvas = document.getElementById('map');
-        var mapOptions = {
-            center: location,
-            zoom: 3,
-            //            panControl: false,
-            mapTypeId: google.maps.MapTypeId.ROADMAP
+  var gbstrace = {
+    type: 'scatter',
+    x: [15],
+    y: [15],
+    //y: ['Guillain-BarrÃ© Syndrome'],
+    text: ['Guillain-BarrÃ© Syndrome'],
+    textposition: 'center',
+    mode: 'markers+text',
+    name: 'Cases per 1M in USA',
+    //showlegend: false,
+    marker: {
+      color: 'rgba(211, 172, 167, 0.95)',
+      line: {
+        color: 'rgba(211, 172, 167, 1.0)',
+        width: 1,
+      },
+      symbol: 'circle',
+      size: 16
     }
-        map = new google.maps.Map(mapCanvas, mapOptions);
+  };
   
+  var zikatrace = {
+    type: 'scatter',
+    x: [zcases],
+    y: [zcases],
+    //y: ['Guillain-BarrÃ© Syndrome'],
+    text: ['Zika Virus Syndrome'],
+    textposition: 'center',
+    mode: 'markers+text',
+    name: 'Cases per 1M in state',
+    //showlegend: false,
+    marker: {
+      color: 'rgba(211, 172, 167, 0.95)',
+      line: {
+        color: 'rgba(211, 172, 167, 1.0)',
+        width: 1,
+      },
+      symbol: 'circle',
+      size: 16
     }
+  };
 
-    google.maps.event.addDomListener(window, 'load', initMap);
+  var data = [smalltrace, largetrace, gbstrace, zikatrace];
+
+  var xtickvals = [0.1, 1, 10, 100, 1000];
+  var xticktext = ["1 in 10 million", "1 in 1 million", "1 in 100,000", "1 in 10,000", "1 in 1,000"];
+
+  var layout = {
+    title: 'Comparison of risks',
+    xaxis: {
+      showgrid: true,
+      showline: true,
+      fixedrange: true,
+      linecolor: 'rgb(102, 102, 102)',
+      titlefont: {
+        font: {
+          color: 'rgb(204, 204, 204)'
+        }
+      },
+      tickfont: {
+        font: {
+          color: 'rgb(102, 102, 102)'
+        }
+      },
+      type: 'log',
+      rangemode: 'nonnegative',
+      tickvals: xtickvals,
+      ticktext: xticktext,
+      //tickmode: 'array',  // setting tickmode 'array' ignored xtickvals
+      ticks: 'outside',
+      tickcolor: 'rgb(102, 102, 102)'
+    },
+    yaxis: {
+      autorange: 'reversed',
+      fixedrange: true,
+      showgrid: false,
+      showline: false,
+      zeroline: false,
+      showticklabels: false,
+      ticks: '',
+      type: 'log',
+      rangemode: 'nonnegative',
+    },
+    //  margin: {
+    //    l: 140,
+    //    r: 40,
+    //    b: 50,
+    //    t: 80
+    //  },
+    //showlegend: false,
+    legend: {
+      orientation: 'h',
+    },
+    width: 600,
+    height: 400,
+    paper_bgcolor: 'rgb(254, 247, 234)',
+    plot_bgcolor: 'rgb(254, 247, 234)',
+    //  hovermode: 'closest'
+  };
 
+  Plotly.newPlot('ladder', data, layout);
+};
 
-});
+MyApp.geocoder = new google.maps.Geocoder();
 
 // Geocoding promise
-var geocoder = new google.maps.Geocoder();
-
-function geocode(address) {
+MyApp.geocode = function (address) {
+  "use strict";
   // Return a new promise.
   return new Promise(function (resolve, reject) {
-        geocoder.geocode({
+    MyApp.geocoder.geocode({
       'address': address
     }, function (results, status) {
       if (status == 'OK') {
@@ -96,58 +264,129 @@ function geocode(address) {
       }
     });
   });
-}
+};
 
-// Process form and call python
-$(function () {
+MyApp.submitForm = function () {
+  "use strict";
 
-    var submit_form = function (e) {
+  if (MyApp.validData()) {
 
-        var destination = $('input[name="destination"]').val()
+    var destination = $('input[name="destination"]').val();
     //console.log(destination)
 
-        geocode(destination).then(function (response) {
+    MyApp.geocode(destination).then(function (response) {
       //console.log("Success!", response);
-            map.fitBounds(response.geometry.viewport);
+      MyApp.map.fitBounds(response.geometry.viewport);
       var marker = new google.maps.Marker({
-                map: map,
+        map: MyApp.map,
         position: response.geometry.location
       });
-            return response.geometry.location;
+      return response;
     }, function (error) {
       alert('Geocode not successful: ' + status);
-        }).then(function (latlong) {
-            //console.log(JSON.stringify(latlong.toJSON()));
-            $.getJSON('http://127.0.0.1:5000/calculate', {
-                    // XXX still using zip code
-                    //destination: JSON.stringify(latlong.toJSON()),
-                    destination: destination,
-                    date: $('input[name="date"]').val()
+    }).then(function (response) {
+      // TODO determine how to parse address_components
+      var country, state, county, component;
+      //            console.log(response.address_components);
+      for (var x = 0; x < response.address_components.length; x++) {
+        component = response.address_components[x];
+        console.log(component);
+        //                console.log(component.types[0]);
+        //        switch(component.types[0]) {
+        //          case "country":
+        //            country = component.long_name;
+        //          case "administrative_area_level_1":
+        //            state = component.long_name;
+        //          case "administrative_area_level_2":
+        //            county = component.long_name;   
+        //        };
+        if (component.types[0] == "country") {
+          country = component.long_name;
+        } else if (component.types[0] == "administrative_area_level_1") {
+          state = component.long_name;
+        } else if (component.types[0] == "administrative_area_level_2") {
+          county = component.long_name;
+        };
+        //        if (component.types[0] == "administrative_area_level_1") {
+        //          state = component.long_name
+        //          console.log(component.long_name)
+        //        }
+
+      }
+      if (country != "United States") {
+        $('#result').text("Error: data not available outside the US");
+        return 1
+      };
+      console.log(country);
+      console.log(state);
+      console.log(county);
+      //console.log(response.address_components[2].long_name);
+      $.getJSON($SCRIPT_ROOT + '/calculate', {
+          lat: response.geometry.location.lat(),
+          lng: response.geometry.location.lng(),
+          date: $('input[name="date"]').val(),
+          state: state,
+          county: county,
         },
         function (data) {
+          if (data.result.error != 0) {
+            $('#result').text("Error: " + data.result.error);
+            return 1
+          } else {
             console.log(data.result);
-                    //$('#result').text(data.result);
             $('input[name=destination]').focus().select();
             //alert(data.result);
-                    drawChart();
-                    console.log(data.result.text)
-                    $('input#submit').parent().after("<p>" + data.result.text + "</p>");
+            //MyApp.drawGauge(data.result.risk);
+            // FIXME correct behavior on zero
+            MyApp.drawLadder(0);
+            //console.log(data.result.text)
+            $('#result').text(data.result.text);
+          }
         });
     });
+  };
 
   return false;
 };
 
-    $('input#submit').bind('click', submit_form);
 
+// Process form and call python
+$(document).ready(function () {
+  "use strict";
+
+  // Add functionality to nav tabs
+  $('#myNavTabs a').click(function (e) {
+    "use strict";
+    //console.log("click");
+    e.preventDefault();
+    $(this).tab('show');
+  });
+
+  // Load Google chart package
+  google.charts.load('current', {
+    'packages': ['gauge']
+  });
+
+  // Load map
+  google.maps.event.addDomListener(window, 'load', MyApp.initMap);
+
+  // Client-side validation of input
+  $('input[name="destination"]').on('keyup textinput', MyApp.checkSubmit);
+  $('input[name="date"]').on('change', MyApp.checkSubmit);
+
+  // Bind button click to submit
+  $('input#submit').bind('click', MyApp.submitForm);
+
+  // Bind enter to submit
+  // FIXME require input validation
   $('input[type=text]').bind('keydown', function (e) {
     if (e.keyCode == 13) {
-            submit_form(e);
+      MyApp.submitForm(e);
     }
   });
 
+  // Put cursor into first input box
   $('input[name=destination]').focus();
 
 
-
 });
\ No newline at end of file
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/server.py b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/server.py
index 66ee282..fc739f4 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/server.py
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/server.py
@@ -5,10 +5,13 @@ import datetime
 from functools import update_wrapper
 from ftplib import FTP
 import json
-import urllib
+import logging
+import unicodedata
+import urllib2
 
 # 3RD PARTY LIBRARIES
-#import numpy
+from bs4 import BeautifulSoup
+import numpy as np
 
 from flask import Flask, jsonify, render_template, request, make_response, current_app
 # from flask_cors import CORS, cross_origin
@@ -17,61 +20,153 @@ app = Flask(__name__)
 CORS(app)
 app.debug = True
 
+# Only use the FileHandler from gunicorn.error logger
+gunicorn_error_handlers = logging.getLogger('gunicorn.error').handlers
+app.logger.handlers.extend(gunicorn_error_handlers )
+#app.logger.addHandler(myhandler1)
+#app.logger.addHandler(myhandler2)
+app.logger.info('my info')
+app.logger.debug('debug message')
+
 ####
 
 open_climate_ftp = "ftp.ncdc.noaa.gov"
 #"/pub/data/normals/1981-2010/"
+zika_url = "http://www.cdc.gov/zika/intheus/maps-zika-us.html"
+census_api_key = "36a6a8b2ee9eafcc4afb7f7948e2724907c628e3"
+census_url = "http://api.census.gov/data/2015/acs1"
+
+
+#@app.before_first_request
+#def setup_logging():
+    #if not app.debug:
+        ## In production mode, add log handler to sys.stderr.
+        #app.logger.addHandler(logging.StreamHandler())
+        #app.logger.setLevel(logging.INFO)
 
 @app.route('/')
 def index():
     return render_template('index.html')
 
+
 @app.route('/calculate', methods=['GET', 'OPTIONS'])
 def calculate():
     #    destination = request.form.get('destination')
     #    date = request.form.get('date')
-    destination = request.args.get('destination')
+    #    destination = request.args.get('destination')
+    lat = request.args.get('lat', type=float)
+    lng = request.args.get('lng', type=float)
     mydate = request.args.get('date')
-    print destination
-#    print "I like donkeys"
+    state = request.args.get('state')
+    county = request.args.get('county')
+#    print destination
+    kwargs = dict(lat=lat,
+                  lng=lng,
+                  mydate=mydate,
+                  state=state,
+                  county=county)
+    return jsonify(result=get_result(**kwargs))
+
+def get_result(lat, lng, mydate, state=None, county=None):
+
+    result_dict = dict(text=None,
+                       risk=None,
+                       zcases=None,
+                       error=0)
+  
+    latlng = (lat, lng)
+    #print latlng
+    app.logger.debug(latlng)
 
-    # TODO parse date
-    datefmt = "%m/%d/%Y"
+    # parse date
+    datefmt = "%Y-%m-%d"
+    try:
         parsed_date = datetime.datetime.strptime(mydate, datefmt)
+    except ValueError:
+        # Server-side input validation
+        result_dict['error'] = 'Invalid date'
+        return result_dict
     month_number = parsed_date.month
     month_name = parsed_date.strftime("%B")
 
 #    print mydate, month_number, month_name
 
+    app.logger.debug(state)
+    cases = None
+    pop_sentence = None
+    if state is not None:
+        app.logger.debug("getting zika data")
+        zika_data = get_zika()
+        for row in zika_data[1:]:
+            app.logger.debug("{0} {1} {2}".format(row[0], state, state.lower() == row[0].lower()))
+            if state.lower() == row[0].lower():
+                cases = row[1] + row[2]
+
+        pop_dict = get_population(state=state, county=county)
+        if pop_dict['error'] is None:
+            if county is not None and pop_dict['county_pop'] is not None:
+                pop_sentence = "{0}, {1} has {county_pop} residents.".format(county, state, **pop_dict)
+            elif pop_dict['state_pop'] is not None:
+                pop_sentence = "{0} has {state_pop} residents.".format(state, **pop_dict)
+
     # possibly temporarily use zip codes
 #    ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/zipcodes-normals-stations.txt
 
-    # TODO Query NOAA for list of weather stations
+    # Query NOAA for list of weather stations
     ftp = FTP(open_climate_ftp)
     ftp.login()
     ftp.cwd("/pub/data/normals/1981-2010/")
+
     station_list = list()
     # Fixed width
     # Columns: ID, lat, long, ??, state 2 letter, name, ???, ???
-    #ftp.retrlines("station-inventories/allstations.txt", station_list.append)
-    # Space separated
-    # Columns:  ID, zip code, city
-    ftp.retrlines("RETR station-inventories/zipcodes-normals-stations.txt", station_list.append)
-
-    stationid = None
-    for line in station_list:
+    ftp.retrlines("RETR station-inventories/allstations.txt",
+                  station_list.append)
+    coord_array = np.zeros((len(station_list), 2))
+    for x, line in enumerate(station_list):
         parts = line.split()
-#        print destination, parts[1], destination == parts[1]
-        if parts[1] == destination:
-#            print "storing"
-            stationid = parts[0]
-            break
-    print stationid
+        lat = float(parts[1])
+        lon = float(parts[2])
+        coord_array[x, 0] = lat
+        coord_array[x, 1] = lon
+
+#    print coord_array[:6]
+
+    # Find closest weather station
 
-    # TODO Find closest weather station
-    #distances = scipy.spatial.cdist(my_loc, station_loc)
-    #closest = np.partition(distances, 1)[0]
-    # or mydf.nsmallest(1)
+    # radius of Earth in miles
+    earth_radius = 3958.75
+
+    def get_distances(latlng, coord_array):
+        "Compute lat/lng distance using Haversine formula"
+        latlng = np.deg2rad(latlng)
+        coord_array = np.deg2rad(coord_array)
+
+        lat_diff = (coord_array[:, 0] - latlng[0]) * 0.5
+        lng_diff = (coord_array[:, 1] - latlng[1]) * 0.5
+
+        np.sin(lat_diff, out=lat_diff)
+        np.sin(lng_diff, out=lng_diff)
+
+        np.power(lat_diff, 2, out=lat_diff)
+        np.power(lng_diff, 2, out=lng_diff)
+
+        lng_diff *= (np.cos(coord_array[:, 0]) * np.cos(latlng[0]))
+        lng_diff += lat_diff
+
+        np.arcsin(np.power(lng_diff, 0.5), out=lng_diff)
+        lng_diff *= (2 * earth_radius)
+
+        return lng_diff
+
+    distances = get_distances(latlng, coord_array)
+    # Get the index of the smallest distance
+    closest_index = np.argpartition(distances, 1)[0]
+    closest_row = station_list[closest_index]
+    stationid = closest_row.split()[0]
+
+    #print stationid
+    app.logger.debug(stationid)
 
     # TODO Get month data for that weather station
 #        1. Long-term averages of monthly precipitation totals:
@@ -104,48 +199,192 @@ def calculate():
 #       Value12 is the December value.
 #       Flag12  is the completeness flag for December.
 
+    def get_row(filename):
+        row_list = list()
+        ftp.retrlines("RETR {0}".format(filename), row_list.append)
+        for line in row_list:
+            stnid = line[:11]
+            if stnid == stationid:
+                return line
 
     #ftp.retrlines("RETR products/auxiliary/station/{0}-normals.txt".format(stationid))
     
-    # Cooling degree days are equivalent to growing degree days
-    cooling_list = list()
-    ftp.retrlines("RETR products/temperature/mly-cldd-base57.txt", cooling_list.append)
+    temp_risk = None
+    rain_risk = None
 
-    cooling_result = None
-    for line in cooling_list:
-        stnid = line[0:11]
-        #print stationid, stnid, stnid == stationid
-        if stnid == stationid:
-            cooling_result = line
+    # http://www.ncbi.nlm.nih.gov/pmc/articles/PMC4001452/
+    # Aedes albopictus is not expected to survive average January temperatures of -5 C (23 F)
+#    tenths of degrees Fahrenheit for maximum, minimum, average, dew point, heat
+#    index, wind chill, and air temperature normals and standard deviations.
+#    e.g., "703" is 70.3F
+    tavg_row = get_row("products/temperature/mly-tavg-normal.txt")
+    if tavg_row is not None:
+        tavg_ints = [int(v[:-1]) * 0.1 for v in tavg_row.split()[1:]]
+        jan_temp = tavg_ints[0]
+        temp_risk = bool(jan_temp > 23.0)
+
+    # Aedes albopictus requires a minimum annual rainfall of ~250 mm (9.8 inches)
+#    tenths of inches for average monthly/seasonal/annual snowfall,
+#    month-to-date/year-to-date snowfall, and percentiles of snowfall.
+#    e.g. "39" is 3.9"
+    rain_row = get_row("products/precipitation/ann-prcp-normal.txt")
+    if rain_row is not None:
+        rain_in = int(rain_row.split()[1][:-1]) * 0.1
+        rain_risk = bool(rain_in >= 9.8)
+
+    if temp_risk and rain_risk:
+
+        cooling_value = None
+        # http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3700474/
+        # roughly 100 degree days for Culex
+        # Cooling degree days are equivalent to growing degree days
+        cooling_result = get_row("products/temperature/mly-cldd-base57.txt")
         #    print cooling_result
+        if cooling_result is not None:
             cooling_list = cooling_result.split()
-    cooling_value = int(cooling_list[month_number][:-1])
+            cooling_ints = [int(v[:-1]) if v[0] !=
+                            "-" else 0 for v in cooling_list[1:]]
+            cumulative_cdd = np.cumsum(cooling_ints)
+            #print cumulative_cdd
+            app.logger.debug(cumulative_cdd)
+            cooling_value = cumulative_cdd[month_number - 1]
+
+        cooling_text = "mosquitoes have likely not yet hatched"
+        if cooling_value > 100:
+            cooling_text = "mosquitoes have likely hatched"
+
+            # tmin 9.6 C (49.28 F)
+            # tmax 37 C (98.6 F)
+            # TODO convert to quadratic
+            month_temp = tavg_ints[month_number - 1]
 
+            conjunction = "but"
+            risk = 1
+            if month_temp < 49.28:
+                temp_text = "it is too cold for mosquitoes"
+            elif month_temp > 98.6:
+                temp_text = "it is too hot for mosquitoes"
+            else:
+                conjunction = "and"
+                temp_text = "it is the right temperature for mosquitoes"
+                risk = 15
+
+            cooling_text = " ".join([cooling_text, conjunction, temp_text])
+
+        # Aedes aegypti populations are not necessarily rainfall dependent
     #    hundredths of inches for average monthly/seasonal/annual precipitation,
     #    month-to-date/year-to-date precipitation, and percentiles of precipitation.
     #    e.g., "1" is 0.01" and "1486" is 14.86"
+#        precip_result = get_row("products/precipitation/mly-prcp-normal.txt")
+#    #    print precip_result
+#        precip_list = precip_result.split()
+#        precip_value = int(precip_list[month_number][:-1]) * 0.01
 
-    precip_list = list()
-    ftp.retrlines("RETR products/precipitation/mly-prcp-normal.txt", precip_list.append)
+        result_text = "The climate at your destination is hospitable to mosquitoes. In {month_name}, {cooling_text}.".format(
+            cooling_text=cooling_text, month_name=month_name)
 
-    precip_result = None
-    for line in precip_list:
-        stnid = line[0:11]
-        #print stationid, stnid, stnid == stationid
-        if stnid == stationid:
-            precip_result = line
-#    print precip_result
-    precip_list = precip_result.split()
-    precip_value = int(precip_list[month_number][:-1])
+        # TODO compute some sort of risk
+        risk = 15
+
+    else:
+        result_text = "The climate at your destination is not hospitable to mosquitoes."
+        risk = 1
+    
+    if state is not None and cases is not None:
+        result_text += " {0} total cases of Zika have been reported in {1}.".format(cases, state)
+        # TODO logistic function
+        risk = min(100, risk * 2)
+
+    if pop_sentence is not None:
+        result_text = result_text + " " + pop_sentence
+
+    result_dict['text'] = result_text
+    result_dict['risk'] = risk
+
+    return result_dict
+
+
+def get_zika():
+    html_doc = urllib2.urlopen(zika_url)
 
-    result_text = "At your destination, {month_name} normally has {0} cooling degree days and {1} inches of rain".format(cooling_value, precip_value * 0.01, month_name=month_name)
+    soup = BeautifulSoup(html_doc, "html.parser")
+
+    table = soup.body.find("div", id="content").table
+
+    def clean_text(text):
+        for repl in "\n", u"\u2020", "*":
+            text = text.replace(repl, " ")
+        text = text.strip()
+        if text:
+            return unicodedata.normalize("NFKD", text)
+
+    def process_row(row):
+        for x in 1, 2:
+            row[x] = int(row[x].split()[0].replace(",", ""))
+        return row
+
+    data = list()
+
+    header_cols = table.thead.find_all("th")
+    header_cols = [clean_text(ele.text) for ele in header_cols]
+    data.append(header_cols)
+
+    for row in table.tbody.find_all('tr'):
+        cols = row.find_all('td')
+        cols = [clean_text(ele.text) for ele in cols]
+        if cols and not all(c is None for c in cols):
+            data.append(process_row(cols))
+
+    return data
+
+def get_population(state=None, county=None):
+    result = dict(error=None,
+                  state_pop=None,
+                  county_pop=None)
+
+    if state is None:
+        result['error'] = "No population data available."
+        return result
+
+    kwargs = dict(key=census_api_key)
+    state_param = "?get=NAME,B01001_001E&for=state:*&key={key}".format(**kwargs)
+    state_url = census_url + state_param
+    
+    state_data = json.load(urllib2.urlopen(state_url))
+    header = state_data[0]
+    name_index = header.index("NAME")
+    pop_index = header.index("B01001_001E")
+    number_index = header.index("state")
+
+    state_number = None
+    for row in state_data[1:]:
+        if row[name_index].lower() == state.lower():
+            if county is None:
+                result['state_pop'] = row[pop_index]
+                return result
+            else:
+                state_number = row[number_index]
+                break
 
-    result_dict = dict(text=result_text,
-                       risk="low")
+    if state_number is not None and county is not None:
+        county_param = "?get=NAME,B01001_001E&for=county:*&in=state:{state}&key={key}".format(state=state_number, **kwargs)
+        county_url = census_url + county_param
+        county_handle = urllib2.urlopen(county_url)
+        try:
+            county_data = json.load(county_handle)
+        except Exception:
+            app.logger.debug(county_url)
+            raise
 
-    # TODO determine amount of degree days and precipitation needed for mosquitoes
+        c_header = county_data[0]
+        c_name_index = c_header.index("NAME")
+        c_pop_index = c_header.index("B01001_001E")
+        for row in county_data[1:]:
+            if row[c_name_index].lower().startswith(county.lower()):
+                result['county_pop'] = row[c_pop_index]
+                return result
 
-    return jsonify(result=result_dict)
+    return result
 
 if __name__ == "__main__":
     app.run()
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/server.pyc b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/server.pyc
deleted file mode 100644
index ac9e76c..0000000
Binary files a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/server.pyc and /dev/null differ
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/static/calendar.gif b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/static/calendar.gif
new file mode 100644
index 0000000..52f2863
Binary files /dev/null and b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/static/calendar.gif differ
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/static/style.css b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/static/style.css
index 1b5fa5e..1c44111 100644
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/static/style.css
+++ b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase2-public/2016blackironhack-lennax/static/style.css
@@ -6,4 +6,25 @@ body {
   width: 100%;
   height: 400px;
   background-color: grey;
+  /*  reset box sizing for bootstrap 
+  http://getbootstrap.com/getting-started/#third-box-sizing */
+  -webkit-box-sizing: content-box;
+     -moz-box-sizing: content-box;
+          box-sizing: content-box;
+}
+
+#gauge {
+  min-width: 310px;
+  max-width: 400px;
+  height: 300px;
+  margin: 0 auto
+}
+
+.references p {
+  padding-left: 22px;
+  text-indent: -22px;
+}
+
+.disabled {
+  opacity: 0.2;
 }
\ No newline at end of file
diff --git a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/templates-index.html b/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/templates-index.html
deleted file mode 100644
index 42d9fe8..0000000
--- a/home/priyank/Desktop/Dropbox/RCODI/similarity-and-code-analysis/black/blackironhack-phase1-public/2016blackironhack-lennax/templates-index.html
+++ /dev/null
@@ -1,102 +0,0 @@
-<!DOCTYPE html>
-<html>
-
-<head>
-    <title>Travel risk evaluation</title>
-
-    <meta charset="UTF-8">
-    <meta name="description" content="Travel risk evaluator">
-    <meta name="author" content="Lenna Peterson">
-    <meta name="viewport" content="width=device-width, initial-scale=1">
-
-    <!-- Latest compiled and minified CSS -->
-    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
-
-    <!-- Optional theme -->
-    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
-
-    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
-
-    <link rel='stylesheet' href='static/style.css' type='text/css'>
-
-</head>
-
-<body>
-    <div class="navbar navbar-inverse navbar-fixed-top">
-        <div class="container">
-            <div class="navbar-header">
-                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
-                    <span class="icon-bar"></span>
-                    <span class="icon-bar"></span>
-                    <span class="icon-bar"></span>
-                </button>
-                <!--            TODO should go to #home-->
-                <a class="navbar-brand" href="#"></a>
-            </div>
-            <div class="collapse navbar-collapse">
-                <ul class="nav navbar-nav" id="myNavTabs" role="tablist">
-                    <li role="presentation" class="active">
-                        <a href="#home" aria-controls="home" role="tab" data-toggle="tab">Home</a></li>
-                    <li role="presentation">
-                        <a href="#about" aria-controls="about" role="tab" data-toggle="tab">About</a></li>
-                    <li role="presentation">
-                        <a href="#contact" aria-controls="contact" role="tab" data-toggle="tab">Contact</a></li>
-                </ul>
-            </div>
-            <!--/.nav-collapse -->
-        </div>
-    </div>
-
-    <div class="container">
-        <div class="tab-content">
-            <div role="tabpanel" class="tab-pane fade in active" id="home">
-                <h1>Travel information</h1>
-                <p class="lead">Where are you going?</p>
-                <div class="row">
-                    <div class="col-md-3">
-                        <form>
-                            <p>Zip code:
-                                <input type=text size="10" name="destination" value="68339">
-                            </p>
-                            <p>Date of travel:
-                                <input type="text" id="datepicker" size="10" name="date">
-                            </p>
-                            <p>
-                                <input type="submit" id="submit">
-                            </p>
-                        </form>
-                    </div>
-                    <div class="col-md-3">
-                        <div id="gauge" style="min-width: 310px; max-width: 400px; height: 300px; margin: 0 auto"></div>
-                    </div>
-                    <div class="col-md-6">
-                        <div id="map">Right panel</div>
-
-                    </div>
-
-
-                </div>
-                <div class="row">
-                    <div class="col-md-12">
-                        <!--                        Bottom panel-->
-                    </div>
-                </div>
-            </div>
-            <div role="tabpanel" class="tab-pane fade" id="about">
-                <h1>About</h1></div>
-            <div role="tabpanel" class="tab-pane fade" id="contact">
-                <h1>Contact</h1></div>
-        </div>
-    </div>
-
-    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
-    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
-    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
-    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDadi4nI9R8BtPsLjB8Lh31jB8kZ60hde0"></script>
-    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
-
-    <script type="text/javascript" src="js/script.js"></script>
-
-</body>
-
-</html>
\ No newline at end of file
